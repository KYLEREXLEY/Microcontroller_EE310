//-----------------------------
// Title: I0_ports
//-----------------------------
// Purpose: To use photoresistors,7_seg_pushbutton,relays,motors and buzzers
//for a secret_box opening
// Dependencies: headerfiles
// Compiler: IDE v6.20
// Author: Kyler Exley 
// OUTPUTS: 7-segmment display,buzzer,motor
// INPUTS: photo button1,photo button2,confirm button, stop button.
// Versions:
//  	V6.20: 3/23/2024 - First version
//-----------------------------

#include <xc.h>
#include "C:/Program Files/Microchip/xc8/v2.46/pic/include/proc/pic18f47k42.h"
#include <stdio.h>

#define _XTAL_FREQ 4000000                 // Fosc  frequency for _delay()  library
#define FCY    _XTAL_FREQ/4
#define SECRET_CODE 0x33
char Touchlessbutton1();
char Touchlessbutton2();
void __interrupt(irq(IRQ_INT0),base(0x4008)) INT0_ISR(void)
{
        // Check if interrupt flag for INT0 is set to 1 - (note INT0 is your input)
    if(PIR1bits.INT0IF ==1)
    {
        for(int i=0; i<4;i++)
        {
        CLRWDT();
        PORTAbits.RA5=1;
        __delay_ms(700);
        PORTAbits.RA5=0;
        __delay_ms(700);
        }
            
    }
            // if so, do something
                // e.g,blink an LED connected to  PORTDbits.RD0 for 10 times with a delay of __delay_ms(250)
        // always clear the interrupt flag for INT0 when done
         PIR1bits.INT0IF =0;
        // turn off the led on PORTDbits.RD0 
}
void INTERRUPT_Initialize (void)
{
  INTCON0bits.IPEN = 1;  // Enable interrupt priority bit in INTCON0 (check INTCON0 register and find the bit)
  INTCON0bits.GIEH=1; // Enable high priority interrupts using bits in INTCON0
  INTCON0bits.GIEL=1;  // Enable low priority interrupts using bits in INTCON0
  INTCON0bits.INT0EDG = 1;  // Interrupt on rising edge of INT0 pin using bits in INTCON0
  IPR1bits.INT0IP=1;  // Set the interrup high priority (IP) for INT0 - INT0IP
  PIE1bits.INT0IE=1;  // Enable the interrup (IE) for INT0

  PIR1bits.INT0IF =0;  //Clear interrupt flag for INT01
  
    // Changed IVTBASE 
   IVTBASEU=0x00; // Set IVTBASEU to 0x00 
   IVTBASEU=0x40; // Set IVTBASEH to  0x40; 
   IVTBASEU=0x08; // Set IVTBASEL to 0x08; 
}
void main(void) {
    //PORTD output 7-seg 0 is on 1 is off
    //PORTC RC3 input photo button 1
    //PORTB RB5 input photo button 2
    //PORTA RA3 output motor
    //PORTC RC5 input confirm button
    //PORTB RB0 input interrupt button
    //PORTA RA5 output buzzer
    
    ANSELD=0x00;
    LATD=0x00;
    TRISD=0x00;
    LATC=0x00;
    ANSELC=0x00;
    TRISC=0xFF;
    LATB=0x00;
    ANSELB=0x00;
    TRISB=0xFF;
    LATA=0x00;
    ANSELA=0x00;
    TRISA=0x00;
    PORTC=0x00;
    PORTB=0x00;
    
    PORTD=0xC0;
    INTERRUPT_Initialize();
    char code=0;
    
    char X=Touchlessbutton1();
    char Y=Touchlessbutton2();
    code = (X << 4) | Y;
    if (code == SECRET_CODE)
    {
        __delay_ms(200);
        PORTAbits.RA3=1;
        __delay_ms(1500);
        PORTAbits.RA3=0;
    }
    else
    {
        __delay_ms(100);
        PORTAbits.RA5=1;
        __delay_ms(1500);
        PORTAbits.RA5=0;
    }
    
    return;
}
char Touchlessbutton1()
{
    PORTD=0xC0;
    char count =0;
    char confirm=0;
    
    while(PORTCbits.RC5==0 && confirm==0)
    {
    while(PORTCbits.RC3==0 && confirm==0)
    {   
        CLRWDT();
        if(PORTCbits.RC5==1)
        {
            confirm=1;
        }
    }
    count++;
    if(count >= 10)
        count=0;
    
    if(confirm==1)
        count= count-1;
    switch(count)
    {
        case 0 :PORTD=0xC0;
        break;
        case 1 :PORTD=0xF9;
        break;
        case 2 :PORTD=0xA4;
        break;
        case 3 :PORTD=0xB0;
        break;
        case 4 :PORTD=0x99;
        break;
        case 5 :PORTD=0x92;
        break;
        case 6 :PORTD=0x82;
        break;
        case 7 :PORTD=0xF8;
        break;
        case 8 :PORTD=0x80;
        break;
        case 9 :PORTD=0x90;
        break;
        default:
            PORTD=0xC0;
    }
    while(PORTCbits.RC3!=0)
    {
        CLRWDT();
    }
    __delay_ms(5);
    }
     while(PORTCbits.RC5!=0)
    {
        CLRWDT();
    }
    return count;
}
char Touchlessbutton2()
{
    PORTD=0xC0;
    char count =0;
    char confirm=0;
    
    while(PORTCbits.RC5==0 && confirm==0)
    {
    while(PORTBbits.RB5==0 && confirm==0)
    {
        CLRWDT();
        if(PORTCbits.RC5==1)
        {
            confirm=1;
        }
    }
    count++;
    if(count >= 10)
        count=0;
    if(confirm==1)
        count= count-1;
    switch(count)
    {
        case 0 :PORTD=0xC0;
        break;
        case 1 :PORTD=0xF9;
        break;
        case 2 :PORTD=0xA4;
        break;
        case 3 :PORTD=0xB0;
        break;
        case 4 :PORTD=0x99;
        break;
        case 5 :PORTD=0x92;
        break;
        case 6 :PORTD=0x82;
        break;
        case 7 :PORTD=0xF8;
        break;
        case 8 :PORTD=0x80;
        break;
        case 9 :PORTD=0x90;
        break;
        default:
            PORTD=0xC0;
    }
    while(PORTBbits.RB5!=0)
    {
        CLRWDT();
    }
    __delay_ms(5);
    }
    while(PORTCbits.RC5!=0)
    {
        CLRWDT();
    }
    return count;
}
